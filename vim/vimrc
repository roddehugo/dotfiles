" vim:foldmethod=marker:foldlevel=0
" {{{ General

syntax on " enable syntax highlighting
filetype plugin indent on " let the filetype plugins do the work.

" }}}
" {{{ System

set nocompatible " not compatible with vi
set autoread " detect when a file is changed
set hidden " current buffer can be put into background

set history=1000 " change history length
set undolevels=1000 " number of undo levels

set ttyfast " optimize for fast terminal connections
set clipboard=unnamed " use the OS clipboard by default
set encoding=utf-8 nobomb " use UTF-8 without BOM
set mouse=a " enable mouse in all modes

set modeline " respect modeline in files
set modelines=2 " only read the first two lines

" centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
set undodir=~/.vim/undo

" don't create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" }}}
" {{{ Interface

set laststatus=2 " always show status line
set showtabline=2 " always show tab line
set showcmd " display the number of characters and lines in visual mode
set showmode " show the current mode
set synmaxcol=180 " only syntax first n characters

" ruler
set ruler " show row and column ruler information
set rulerformat=%=%h%m%r%w\ %(%c%V%),%l/%L\ %P

" line numbers
set number " show line numbers
set numberwidth=3 " set gutter width to n cols

" a - terse messages (like [+] instead of [Modified]
" t - truncate file names
" I - no intro message when starting vim fileless
" T - truncate long messages to avoid having to hit a key
set shortmess=atTI

" }}}
" {{{ Behavior

" always activate spell corrections
set spell

" movements
set backspace=indent,eol,start " make backspace behave in a sane manner
set nostartofline " don’t reset cursor to start of line when moving around.
set scrolloff=5 " keep n lines below and above cursor.

" line breaking/wrapping
set wrap " turn on line wrapping
set wrapmargin=8 " wrap lines when coming within n characters from side
set linebreak " set soft wrapping
set showbreak=↪\  " show at breaking (with extra space)
set textwidth=80 " set hard text wrapping (number of cols)
set colorcolumn=80 " display wrapping column
set formatoptions=tcrq " format using textwidth, including comments and gq

" highlighting
set cursorline " highlight position of cursor
set showmatch " highlight matching brace

" search
set magic " set magic on, for regex
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expression contains a capital letter
set hlsearch " highlight search results
set incsearch " set incremental search, like modern browsers
set gdefault " add the g flag to search/replace by default
set lazyredraw " don't redraw while executing macros

" visual bell and no error notification (no beeping)
set noerrorbells
set visualbell

" indentation
set autoindent " automatically set indent of new line
set smartindent " automatically inserts one extra level of indentation
set cindent " like smartindent but stricter and more customisable

" toggle invisible characters
set list
set listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_,extends:❯,precedes:❮

" tabulation
set expandtab " insert tabs rather than spaces for <Tab>
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'

" autocompletion
set completeopt=menu
set completeopt+=longest " complete files like a shell
set wildmenu " enhanced command line completion
set wildmode=longest,full " complete files like a shell
set pumheight=8 " max items in popup menu
set wildignore=*.o,*~,*.pyc,.git\*,.hg\*,.svn\*,.meteor

" code folding
set foldenable " fold by default
set foldlevel=0 " fold all levels by default
set foldcolumn=1 " sets the width for a gutter column
set foldmethod=indent " fold based on indent
set foldnestmax=6 " deepest fold

" }}}
" {{{ Mappings

" set custom mapleader
let mapleader=","

" set paste toggle
set pastetoggle=<leader>vv

" disable Ex mode
noremap <silent> Q <nop>

" enable . command in visual mode
vnoremap . :normal .<cr>

" remap VIM 0 to first non-blank character
nnoremap 0 ^

" make use of ctags and csope easier
noremap gt <C-]>

" fold/unfold map
noremap <space> za
noremap <c-space> zA

" toggle curet or line
nnoremap <leader>i :set cursorline!<cr>

" toggle special characters
nnoremap <leader>l :set list! list?<cr>

" toggle highlighted search
noremap <leader><space> :set hlsearch! hlsearch?<cr>

" wipeout buffer
nnoremap <leader>bb :bw<cr>

" switch between current and last buffer
nnoremap <leader>; <c-^>

" fix trailing spaces in buffer
noremap <leader>ss :StripWhitespace<cr>

" remove the Windows ^M - when the encodings gets messed up
noremap <leader>mm mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" refactor all file
noremap =f ggVG=

" refactor json file
noremap =j :%!python -m json.tool<cr>

" save a file as root (,W)
noremap <silent> <leader>W :w !sudo tee -S % > /dev/null<cr>

" switch CWD to the directory of the open buffer
noremap <silent> <leader>cd :cd %:p:h<cr>:pwd<cr>

" create parent directories
noremap <silent> <leader>md :call mkdir(expand('%:h'), 'p')<cr>

" edit vim config
noremap <leader>ev :e! ~/.config/nvim/init.vim<cr>
" edit git config
noremap <leader>eg :e! ~/.gitconfig<cr>
" edit tmux config
noremap <leader>et :e! ~/.tmux.conf<cr>

" keep selection after indentation
vnoremap <silent> < <gv
vnoremap <silent> > >gv

" moving up and down work as you would expect
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

" disable arrow keys in escape mode
map <silent> <up> <nop>
map <silent> <down> <nop>
map <silent> <left> <nop>
map <silent> <right> <nop>

" disable arrow keys in insert mode
imap <silent> <up> <nop>
imap <silent> <down> <nop>
imap <silent> <left> <nop>
imap <silent> <right> <nop>

" scroll the viewport faster
nnoremap <silent> <C-e> 3<C-e>
nnoremap <silent> <C-y> 3<C-y>

" helpers for dealing with other people's code
nnoremap \t4 :set ts=4 sts=4 sw=4 noet<cr>
nnoremap \t2 :set ts=2 sts=2 sw=2 noet<cr>
nnoremap \s4 :set ts=4 sts=4 sw=4 et<cr>
nnoremap \s2 :set ts=2 sts=2 sw=2 et<cr>

" smart way to move between windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

" easy window resizing x2
nnoremap <silent> <leader>+ :exe "resize " . (winheight(0) * 2)<cr>
nnoremap <silent> <leader>- :exe "resize " . (winheight(0) * 1/2)<cr>

" opens a new tab with the current buffer's path
" super useful when editing files in the same directory
nnoremap <leader>oe :e <C-R>=expand("%:p:h") . "/" <cr>
nnoremap <leader>ot :tabe <C-R>=expand("%:p:h") . "/" <cr>
nnoremap <leader>os :split <C-R>=expand("%:p:h") . "/" <cr>
nnoremap <leader>ov :vsplit <C-R>=expand("%:p:h") . "/" <cr>
nnoremap <leader>oc :e %<.c<cr>
nnoremap <leader>oC :e %<.cc<cr>
nnoremap <leader>oh :e %<.h<cr>
nnoremap <leader>oH :e %<.hh<cr>

" relative path (src/foo.txt)
nnoremap <leader>cf :let @+=expand("%")<cr>
" absolute path (/something/src/foo.txt)
nnoremap <leader>cF :let @+=expand("%:p")<cr>
" filename (foo.txt)
nnoremap <leader>ct :let @+=expand("%:t")<cr>
" directory name (/something/src)
nnoremap <leader>ch :let @+=expand("%:p:h")<cr>

" }}}
" {{{ Functions

" strip trailing whitespace (,ss)
function! StripWhitespace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" }}}
" {{{ Autocommands

if has('autocmd') && !exists('autocommands_loaded')
  let autocommands_loaded = 1

  autocmd BufRead,BufNewFile Module set filetype=make
  autocmd BufRead,BufNewFile .notes set filetype=markdown
  autocmd BufRead,BufNewFile jrnl*.txt set filetype=journal

  autocmd FileType ld setlocal ts=8 sts=8 sw=8 noet
  autocmd FileType make setlocal ts=4 sts=4 sw=4 noet
  autocmd FileType c,cpp setlocal ts=4 sts=4 sw=4 et
  autocmd FileType markdown,textile,gitcommit setlocal spell
  autocmd FileType gitcommit setlocal tw=72 cc=72
  autocmd FileType gitrebase setlocal tw=87 cc=87
  autocmd FileType todo setlocal spell ts=2 sts=2 sw=2 et nofoldenable
  autocmd FileType journal setlocal spell spelllang=fr tw=80 cc=80
endif

"}}}
" {{{ Command line

" smart mappings on the command line
cnoremap $h ~/
cnoremap $b ~/.bash.d/
cnoremap $d ~/Desktop/
cnoremap $p ~/Projects/
cnoremap $w ~/Workspaces/

" bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" }}}
