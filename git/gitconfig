[user]
  email = rodde.hugo@gmail.com
  name = Hugo Rodde

[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = "!f() { git log --pretty=oneline -n ${1:-20} --graph --abbrev-commit; }; f"
  # View the current working tree status using the short format
  st = status -sb
  # Branch
  br = branch
  # Patches
  patches = log -p
  # Clone a repository including all submodules
  cr = clone --recursive
  # Commit
  ci = commit
  # Cherry-pick
  cp = cherry-pick
  # Commit all changes
  ca = !"git add -A && git commit -m"
  # Commit all modified changes
  cu = !"git add -u && git commit -m"
  # Switch to a branch, creating it if necessary
  co = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  # Stashes
  sl = stash list
  sa = stash apply
  ss = stash save
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD
  # Remove branches that have already been merged with master
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
  # Show the diff between the latest commit and the current state
  di = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # Show the diff between staged work and last HEAD
  ds = diff --staged
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  din = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Pull in remote changes for the current repository and all its submodules
  pl = !"git pull; git submodule foreach git pull origin master"
  # Set upstream remote branch
  upstr = !"f() { git branch --set-upstream-to=origin/$1 $1; }; f"
  # I know what you did yesterday - great for follow-ups
  logme = log --since '1 day ago' --oneline --author rodde.hugo@gmail.com
  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  # List contributors with number of commits
  contributors = shortlog --summary --numbered
  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"
  # Reset with given number of latest commits
  res = "!r() { git reset HEAD^$1 $2; }; r"
  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  # Find commits made by a contributor the last day
  fp = "!f() { git log --since '1 day ago' --online --author $1; }; f"
  # Show git history as a tree
  tree = "log --graph --decorate --abbrev-commit --date-order --pretty=format:'%Cgreen%h%Creset : %s%Cred%d%Creset (%Cblue%an%Creset, %Cblue%ar%Creset)'"
  tree-all = "log --graph --decorate --abbrev-commit --date-order --pretty=format:'%Cgreen%h%Creset : %s%Cred%d%Creset (%Cblue%an%Creset, %Cblue%ar%Creset)' --all"
  # Merge GitHub pull request on top of the `master` branch
  mpr = "!f() { \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git rebase master pr/$1 && \
      git checkout master && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"
  springcleaning = for-each-ref --sort=-committerdate --format='%(refname:short) %(committerdate:short)'

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  editor = vim

  # Use custom `.gitignore` and `.gitattributes`
  # excludesfile = ~/.gitignore
  # attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  legacyheaders = false

  pager = less -+e

[diff]
  # Detect copies as well as renames
  renames = copies
  tool = vimdiff

[difftool]
  prompt = false

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]
  # Push the current branch to update a branch with the same name on the receiving end
  default = current

[grep]
  lineNumber = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions
  whitespace = red reverse

[color "status"]
  added = green bold
  changed = yellow bold
  untracked = white
