[user]
  email = rodde.hugo@gmail.com
  name = Hugo Rodde

[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = "!f() { git log --oneline --graph --decorate -n ${1:-30} ${@:2}; }; f"
  # Show git history as a tree
  t = "!f() { git log --oneline --graph --decorate --branches ${@}; }; f"
  # View the current working tree status using the short format
  st = status -sb
  # Branch
  br = branch
  # Clone a repository including all submodules
  cr = clone --recursive
  # Commit
  ci = commit
  # Cherry-pick
  cp = cherry-pick
  # Commit all changes
  ca = !"git add -A && git commit -m"
  # Commit all modified changes
  cu = !"git add -u && git commit -m"
  # Switch to a branch, creating it if necessary
  co = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  # Switch to master but fetch first
  com = "!f() { git fetch && git checkout master; }; f"
  # Initialize a repository with an empty commit
  initialize = !"git init && git commit --allow-empty -m 'Initial empty commit'"
  # Show verbose output about patches, tags, branches or remotes
  patches = log -p
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  # Get the commit referenced by a tag
  tagref = rev-list --abbrev-commit -n 1
  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD
  # Fixup the currently staged files to the specified commit
  fixup = commit --fixup
  # Squash the currently staged files to the specified commit
  squash = commit --squash
  # Undo last commit but keep staged changes.
  undo = reset --soft HEAD^
  # Commit staged changes reusing previous commit message.
  recommit = commit -C ORIG_HEAD
  # Split a Git commit and preserve message. Option '-p' for patch edition.
  split-head = "!f() { git reset --soft @~ && git reset $@ && git commit -C ORIG_HEAD; }; f"
  # Remove branches that have already been merged with master
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
  # Show the diff between the latest commit and the current state
  di = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # Show the diff between staged work and last HEAD
  ds = diff --staged
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  din = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Pull in remote changes for the current repository and init/update its submodules
  plu = !"git pull && git submodule init && git submodule update"
  # Pull in remote changes for the current repository and all its submodules
  pls = !"git pull && git submodule foreach git pull"
  # Set upstream remote branch
  upstr = !"f() { git branch --set-upstream-to=origin/$1 $1; }; f"
  # I know what you did yesterday - great for follow-ups
  logme = !"f() { git log ${@:3} ${2:---oneline} --since \"${1:-'1 day ago'}\" --author $(git config --get user.email); }; f"
  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  # List contributors with number of commits
  contributors = shortlog --summary --numbered
  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~\"${@}\"; }; r"
  # Reset with given number of latest commits
  res = "!r() { git reset HEAD~\"${@}\"; }; r"
  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h%Creset %s %Cred%d%Creset' --decorate -S$1; }; f"
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h%Creset %s %Cred%d%Creset' --decorate --date=short --grep=$1; }; f"
  # Find commits made by a contributor the last day
  fp = "!f() { git log --since '1 day ago' --online --author $1; }; f"
  # Fetch Github Pull Requests
  pr = "!f() { git fetch origin refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
  # Fetch Gitlab Merge Requests
  mr = "!f() { git fetch origin merge-requests/$2/head:mr/$2 && git checkout mr/$2; }; f"
  # WIP
  wip = !"f() { git ca \"wip [skip ci]: $1\"; }; f"
  # Refresh master after a merge
  refresh = "!f() { git com && git plu && git dm; }; f"
  # Displays all refs with committerdate
  springcleaning = for-each-ref --sort=-committerdate --format='%(refname:short) %(committerdate:short)'
  # Update commit date '--use-commit-date' will compute the new date wrt. the commit being amended
  set-date = !"f() { \
    if [ \"$1\" = \"--use-committer-date\" ]; then \
      commit_date=$(git log -n 1 --pretty=medium --format=%ct); \
      new=$(date -R -r $commit_date -v $2); \
    elif [ \"$1\" = \"--use-author-date\" ]; then \
      commit_date=$(git log -n 1 --pretty=medium --format=%at); \
      new=$(date -R -r $commit_date $2); \
    else \
      new=$(date -R -v ${1:-+0S}); \
    fi; \
    GIT_COMMITTER_DATE=\"$new\" git commit --amend --no-edit --date=\"$new\"; \
    git log -n 1 --pretty=fuller | egrep --color=auto \"[a-z0-9]{40}|(Author|Commit)Date\" -B 2; \
  }; f"
  # Update commit author
  set-author = !"f() { git commit --amend --no-edit --author=\"${@}\"; }; f"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  editor = nvim

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  legacyheaders = false

  pager = less -+e

[diff]
  # Detect copies as well as renames
  renames = copies
  tool = vimdiff

[difftool]
  # Wait for confirmation after each difftool invocation
  prompt = true

[difftool "vimdiff"]
  cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  diffstat = true
  tool = vimdiff

[mergetool]
  prompt = true

[mergetool "vimdiff"]
  cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[rebase]
  # Automatically squash fixup commits
  autosquash = true

[push]
  # Push the current branch to update a branch with the same name on the receiving end
  default = current

[fetch]
  # Remove deleted branch upstream on local repository
  prune = true
  # Fetch remote tags
  tags = true

[grep]
  lineNumber = true

[gui]
  editor = subl
  historybrowser = gitk

[cola]
  spellcheck = true
  fontdiff = Monaco,12,-1,5,50,0,0,0,0,0
  blameviewer = git gui blame
  boldheaders = true

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions
  whitespace = red reverse

[color "status"]
  added = green bold
  changed = yellow bold
  untracked = white
