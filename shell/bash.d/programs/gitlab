#!/usr/bin/env python3
#
# Copyright (C) 2018 Nicolas Schodet
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
import argparse
import configparser
import requests
import os.path
import urllib.parse

# Config example:
# [default]
# token=
# url=
# project=


def quote(s):
    return urllib.parse.quote(s, safe='')


class Gitlab:
    """Interact with gitlab API."""

    def run(self, args):
        defaults = {
                'config': '~/.gitlab',
                'config_section': 'default',
                }
        # Parse configuration options.
        p = argparse.ArgumentParser(description=self.__doc__, add_help=False)
        c = ' (current value: %(default)r)'
        p.add_argument('-c', '--config', metavar='FILE',
                       help='read configuration from selected file' + c)
        p.add_argument('-C', '--config-section', metavar='SECTION',
                       help='section to use from configuration file' + c)
        p.set_defaults(**defaults)
        args, remaining_args = p.parse_known_args(args)
        # Read configuration file.
        config = configparser.ConfigParser()
        config.read([os.path.expanduser(args.config)])
        defaults.update(dict(config.items(args.config_section)))
        # Full parser.
        p = argparse.ArgumentParser(parents=[p])
        p.set_defaults(**defaults)
        p.add_argument('-u', '--url',
                       help='gitlab base url' + c)
        p.add_argument('-p', '--project',
                       help='project to access' + c)
        sp = p.add_subparsers()
        for n in dir(self):
            if n.startswith('run_'):
                func = getattr(self, n)
                cp = sp.add_parser(n[4:], help=func.__doc__)
                cp.set_defaults(func=func)
        args = p.parse_args(remaining_args)
        # Go.
        if 'func' not in args:
            p.error('no command given')
        args.func(args)

    def run_pipelines(self, args):
        """Request pipelines data."""
        r = requests.get('{url}api/v4/projects/{project}/pipelines'.format(
            url=args.url, project=quote(args.project)),
            headers={'PRIVATE-TOKEN': args.token})
        for i in r.json():
            colors = {
                    'success': 32,
                    'failed': 31,
                    'running': 34,
                    'pending': 33,
                    }
            color = {
                    'color': '\033[%dm' % colors.get(i['status'], 0),
                    'reset': '\033[0m',
                    }
            print('{color}{status:8}{reset} {sha:.10} {ref}'
                  .format(**i, **color))


if __name__ == '__main__':
    import sys
    g = Gitlab()
    g.run(sys.argv[1:])
