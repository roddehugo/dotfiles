#!/bin/bash

# Headers and Logging
function e_header() {
  printf "\n${bold}${purple}==========  %s  ==========${reset}\n" "$@"
}
function e_arrow() {
  printf "➜ $@\n"
}
function e_info() {
  printf "%s\n" "$@"
}
function e_success() {
  printf "${green}✔ %s${reset}\n" "$@"
}
function e_error() {
  printf "${red}✖ %s${reset}\n" "$@"
}
function e_warning() {
  printf "${tan}➜ %s${reset}\n" "$@"
}
function e_underline() {
  printf "${underline}${bold}%s${reset}\n" "$@"
}
function e_bold() {
  printf "${bold}%s${reset}\n" "$@"
}
function e_note() {
  printf "${underline}${bold}${blue}Note:${reset}  ${blue}%s${reset}\n" "$@"
}

# Credt: https://github.com/kevva/dotfiles
# Usage for seeking information
#
# seek_confirmation "Ask a question"
# if is_confirmed; then
#   some action
# else
#   some other action
# fi
function seek_confirmation() {
  printf "${bold}$@${reset}"
  read -p " (y/n) " -n 1
  printf "\n"
}

# underlined
function seek_confirmation_head() {
  printf "${underline}${bold}$@${reset}"
  read -p "${underline} (y/n)${reset} " -n 1
  printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
function is_confirmed() {
  if [[ "$REPLY" =~ ^[Yy]$ ]]; then
    return 0
  fi
  return 1
}

# Test whether the current directory is a Git repository
function is_git_repository() {
  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
    # Check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
      return 0;
    fi;
  fi;
  return 1;
}

# Test whether a command exists
# $1 = cmd to test
#
# Usage:
# if type_exists 'git'; then
#   some action
# else
#   some other action
# fi
function type_exists() {
  if [[ $(type -P $1) ]]; then
    return 0
  fi
  return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
function formula_exists() {
  if $(brew list $1 >/dev/null); then
    printf "%s already installed.\n" "$1"
    return 0
  fi

  e_warning "Missing formula: $1"
  return 1
}

# Test which OS the user runs
# $1 = OS to test
#
# Usage: if is_os 'darwin'; then
function is_os() {
  if [[ "${OSTYPE}" == $1* ]]; then
    return 0
  fi
  return 1
}

# Credit: https://github.com/cowboy/dotfiles
# Given a list of desired items and installed items, return a list
# of uninstalled items. Arrays in bash are insane (not in a good way).
function to_install() {
  local debug desired installed i desired_s installed_s remain
  if [[ "$1" == 1 ]]; then debug=1; shift; fi
  # Convert args to arrays, handling both space- and newline-separated lists.
  read -ra desired < <(echo "$1" | tr '\n' ' ')
  read -ra installed < <(echo "$2" | tr '\n' ' ')
  # Sort desired and installed arrays.
  unset i; while read -r; do desired_s[i++]=$REPLY; done < <(
  printf "%s\n" "${desired[@]}" | sort
  )
  unset i; while read -r; do installed_s[i++]=$REPLY; done < <(
  printf "%s\n" "${installed[@]}" | sort
  )
  # Get the difference. comm is awesome.
  unset i; while read -r; do remain[i++]=$REPLY; done < <(
  comm -13 <(printf "%s\n" "${installed_s[@]}") <(printf "%s\n" "${desired_s[@]}")
  )
  [[ "$debug" ]] && for v in desired desired_s installed installed_s remain; do
  echo "$v ($(eval echo "\${#$v[*]}")) $(eval echo "\${$v[*]}")"
done
echo "${remain[@]}"
}

