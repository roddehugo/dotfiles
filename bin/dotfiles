#!/bin/bash

# Exit on failure
set -e

platform='unknown'
unamestr=$(uname)

if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
    platform='osx'
else
    printf "Unknown plateform!\n"
    exit 1
fi

DOTFILES_DIRECTORY="$HOME/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/roddehugo/dotfiles/tarball/$platform"
DOTFILES_GIT_REMOTE="git@github.com:roddehugo/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d $DOTFILES_DIRECTORY ]]; then
    if [[ $platform == 'osx' && -d "~/Library/Mobile Documents/com~apple~CloudDocs/dotfiles" ]]; then
        printf "Symlinking dotfiles...\n"
        ln -sf "~/Library/Mobile Documents/com~apple~CloudDocs/dotfiles" "$DOTFILES_DIRECTORY"
    else
        printf "Downloading dotfiles...\n"
        mkdir $DOTFILES_DIRECTORY
        # Get the tarball
        curl -fsSLo $HOME/dotfiles.tar.gz $DOTFILES_TARBALL_PATH
        # Extract to the dotfiles directory
        tar -zxf $HOME/dotfiles.tar.gz --strip-components 1 -C $DOTFILES_DIRECTORY
        # Remove the tarball
        rm -rf $HOME/dotfiles.tar.gz
    fi
fi

cd $DOTFILES_DIRECTORY

if [[ $platform == 'osx' ]]; then
    source ./lib/brew
else
    source ./lib/apt
fi

source ./lib/help
source ./lib/pip
source ./lib/configure

source ./shell/bash.d/colors
source ./shell/bash.d/exports
source ./shell/bash.d/utils

# Options
for opt in $@; do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -h|--help) run_help; exit 0 ;;
        -*|--*) e_warning "Warning: invalid option $opt"; run_help; exit 0 ;;
    esac
done

# Prepare /usr/local directory
mkdir -p /usr/local
sudo chown -R $(whoami) /usr/local

install_powerline_fonts() {
   e_header "Installing powerline fonts"
   mkdir /tmp/fonts
   # Get the tarball
   e_info "Dowloading fonts..."
   curl -fsSLo /tmp/fonts.tar.gz https://github.com/powerline/fonts/tarball/master
   # Extract to the fonts directory
   tar -zxf /tmp/fonts.tar.gz --strip-components 1 -C /tmp/fonts
   # Install fonts
   /tmp/fonts/install.sh
   # Remove files
   rm -rf /tmp/fonts*
}

install_brew() {
    if [[ $platform == 'osx' ]]; then
        # Before relying on Homebrew, check that packages can be compiled
        if ! type_exists 'gcc'; then
            e_header "Installing the XCode Command Line Tools"
            xcode-select --install
        fi

        # Check for Homebrew
        if ! type_exists 'brew'; then
            e_header "Installing Homebrew"
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
            e_header "Updating Homebrew"
            brew update
            brew doctor
        fi
    fi
}

install_git() {
    # Check for git
    if ! type_exists 'git'; then
        e_header "Installing Git"
        if [[ $platform == 'osx' ]]; then
            brew install git
        else
            sudo apt-get install -y git
        fi
    fi
}

init_git() {
    # Initialize the git repository if it's missing
    if ! is_git_repository; then
        e_header "Initializing git repository"
        git init
        git remote add origin $DOTFILES_GIT_REMOTE
        git fetch origin $platform
        # Reset the index and working tree to the fetched HEAD
        # (submodules are cloned in the subsequent sync step)
        git reset --hard FETCH_HEAD
        # Remove any untracked files
        git clean -fd
        # Checkout to the $platform branch
        git checkout $platform
        # Remove useless master branch
        git br -D master
    fi
}

sync_remote() {
    # Conditionally sync with the remote repository
    if [[ $no_sync ]]; then
        e_info "Skipped dotfiles sync."
    else
        e_header "Syncing dotfiles"
        # Stash working directory just in case
        git stash
        # Pull down the latest changes
        git pull --rebase origin $platform
        # Update submodules
        git submodule update --recursive --init --quiet
    fi
}

install_packages() {
    # Install and update packages
    if [[ $no_packages ]]; then
        e_info "Skipped packages installation."
    else
        e_info "Updating packages..."
        # Install softwares from either lib/brew or lib/apt
        run_softwares
        # Install Pip packages
        run_pip
        # Configure installed packages
        run_configure
    fi
}

link() {
    # Force create/replace the symlink.
    ln -fs "$DOTFILES_DIRECTORY/$1" "$HOME/$2"
}

pre_mirrorfiles() {
    # Create tmux folders
    [[ ! -d ~/.tmux/plugins ]] && mkdir -p ~/.tmux/plugins
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

    # Do the same for vim
    [[ ! -d ~/.vim/undo ]]    && mkdir -p ~/.vim/undo
    [[ ! -d ~/.vim/swaps ]]   && mkdir -p ~/.vim/swaps
    [[ ! -d ~/.vim/colors ]]  && mkdir -p ~/.vim/colors
    [[ ! -d ~/.vim/bundle ]]  && mkdir -p ~/.vim/bundle
    [[ ! -d ~/.vim/backups ]] && mkdir -p ~/.vim/backups
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
}

mirrorfiles() {
    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "git/gitconfig"                ".gitconfig"
    link "shell/bash.d"                 ".bash.d"
    link "shell/bash_profile"           ".bash_profile"
    link "shell/bash_profile.private"   ".bash_profile.private"
    link "shell/bashrc"                 ".bashrc"
    link "shell/curlrc"                 ".curlrc"
    link "shell/hushlogin"              ".hushlogin"
    link "shell/inputrc"                ".inputrc"
    link "shell/wgetrc"                 ".wgetrc"
    link "editor/editorconfig"          ".editorconfig"
    link "editor/editorthemes"          ".editorthemes"
    link "vim/vimrc"                    ".vimrc"
    link "ssh"                          ".ssh"
    link "tmux/tmux.conf"               ".tmux.conf"
    link "tmux/theme.sh"                ".tmux/theme.sh"
}

post_mirrorfiles() {
    # Copy colorschemes
    find $DOTFILES_DIRECTORY/editor/editorthemes -name "*.vim" -exec link {} $HOME/.vim/colors/ \;

    # Install vim plugins
    if type_exists 'vim'; then
        vim +PluginInstall +qall
    fi

    # Finally source bash_profile
    source $HOME/.bash_profile
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles. Continue?"

if is_confirmed; then
    install_powerline_fonts
    install_brew
    install_git
    init_git
    sync_remote
    install_packages
    pre_mirrorfiles
    mirrorfiles
    post_mirrorfiles
    e_success "Dotfiles installation completed!"
else
    e_error "Aborting..."
    exit 1
fi

if [[ $platform == 'osx' ]]; then
    # Ask before potentially overwriting OS X defaults
    seek_confirmation "Warning: This step may modify your OS X system defaults. Continue?"

    if is_confirmed; then
        source $DOTFILES_DIRECTORY/bin/osxdefaults
        e_success "OS X settings updated! You may need to restart."
    else
        e_info "Skipped OS X settings update."
    fi

    open "http://sourabhbajaj.com/mac-setup/SystemPreferences/README.html"
fi
