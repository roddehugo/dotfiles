#!/usr/bin/env bash

brew_tap() {
  local -a taps=(
    'goles/battery'
    'homebrew/bundle'
    'homebrew/cask'
    'homebrew/cask-drivers'
    'homebrew/services'
  )

  # Install all taps
  # brew tap command only accept one tap repo at a time
  for tap in "${taps[@]}"; do
    e_info "Tapping $tap"
    brew tap $tap
  done
}

brew_formulae() {
  local -a formulae=(
    'ack'
    'astyle'
    'autoconf'
    'automake'
    'bash'
    'bash-completion'
    'bat'
    'battery'
    'binutils'
    'brew-cask-completion'
    'ccls'
    'clang-format'
    'cmake'
    'coreutils'
    'cscope'
    'ctags'
    'ctop'
    'curl'
    'dfu-util'
    'docker'
    'docker-compose'
    'docker-machine'
    'doctl'
    'docutils'
    'ffmpeg'
    'freetype'
    'fzf'
    'gawk'
    'gcc'
    'gdb'
    'gdbgui'
    'git'
    'git-lfs'
    'gnupg'
    'gnutls'
    'grep'
    'gsed'
    'htop-osx'
    'imagemagick'
    'jq'
    'libxml2'
    'libyaml'
    'llvm'
    'lsusb'
    'lua'
    'luarocks'
    'mcrypt'
    'minicom'
    'mosquitto'
    'mysql'
    'neovim'
    'ngrep'
    'nmap'
    'node'
    'numpy'
    'open-completion'
    'openssl@1.1'
    'parallel'
    'perl'
    'pip-completion'
    'pkg-config'
    'postgresql'
    'pyenv'
    'qemu'
    'readline'
    'reattach-to-user-namespace'
    'rename'
    'ripgrep'
    'rsync'
    'ruby'
    'ruby-build'
    'ruby-completion'
    'rustc-completion'
    'sdl2'
    'sdl2_gfx'
    'sdl2_image'
    'sdl2_mixer'
    'sdl2_net'
    'sdl2_ttf'
    'shellcheck'
    'sqlite'
    'ssh-copy-id'
    'telnet'
    'the_silver_searcher'
    'tig'
    'tmux --HEAD'
    'tmuxinator-completion'
    'tree'
    'vagrant-completion'
    'vim'
    'wget'
    'xz'
    'zlib'
  )

  # Install all formulae
  for formula in "${formulae[@]}"; do
    e_info "Brewing $formula"
    brew install $formula
  done
}

brew_cask() {
  local -a casks=(
    'alfred'
    'anaconda'
    'arduino'
    'balenaetcher'
    'betterzip'
    'cheatsheet'
    'crosspack-avr'
    'dash'
    'dropbox'
    'easyeda'
    'fritzing'
    'gcc-arm-embedded'
    'hex-fiend'
    'iterm2'
    'java'
    'kobo'
    'librecad'
    'osxfuse'
    'processing'
    'protonvpn'
    'provisionql'
    'psequel'
    'qlcolorcode'
    'qlimagesize'
    'qlmarkdown'
    'qlprettypatch'
    'qlstephen'
    'qlvideo'
    'qt-creator'
    'quicklook-csv'
    'quicklook-json'
    'quik'
    'sequel-pro'
    'skype'
    'spectacle'
    'sqlitemanager'
    'suspicious-package'
    'suspicious-package'
    'transmission'
    'tripmode'
    'tunnelblick'
    'vagrant'
    'virtualbox'
    'vlc'
    'webpquicklook'
    'webpquicklook'
    'wireshark'
  )

  # Install all casks
  for cask in "${casks[@]}"; do
    e_info "Casking $cask"
    brew install --cask $cask
  done
}

run_softwares() {
  if type_exists 'brew'; then
    e_header "Updating Homebrew"

    # Check everything is fine
    brew doctor
    [[ $? ]] && e_success "Done"

    # Use the latest version of Homebrew
    brew update
    [[ $? ]] && e_success "Done"

    e_header "Updating any existing Homebrew formulae"
    brew upgrade
    [[ $? ]] && e_success "Done"

    e_header "Taping Homebrew"
    brew_tap
    [[ $? ]] && e_success "Done"

    e_header "Installing Homebrew formulae"
    brew_formulae
    [[ $? ]] && e_success "Done"

    e_header "Installing Cask formulae"
    brew_cask
    [[ $? ]] && e_success "Done"

    # Remove outdated versions from the Cellar
    brew cleanup
  else
    e_warn "Homebrew not found. Brew packages installation skipped."
    exit 0
  fi
}
